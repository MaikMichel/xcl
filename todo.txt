TODO:

    DEFAULTS
    - Global defaults haben kein projekt und landen in der environment.yaml
    - Projekt defaults haben ein projekt und landen in der environment_projectName.yaml
    - Reihenfolge der Auswertung:
        1. Befehl
        2. Projektumgebung
        3. Global
    => DONE

    - Vergleiche Status mit Config                                                    (plan)
        * local-Status wird nicht in die Versionskontrolle aufgenommen sondern liegt 
          im lokalen Install-Verzeichnis, oder ist in der gitignore
          GRUND: Eine der Dateien muss die Führende sein, imo, die xcl.yaml
                GRUND: Weil die xcl.yaml in der Versionskontrolle ist
    => DONE
    
    - Ableiten der notwendigen Befehle um Ziel auf den beschriebenen Stand zu bringen (plan)
        * Ableitung schreibt befehle in eine pseudo sh-Datei
        * es werden auch wieder xcl oder sql verwendet
        * GRUND: Es bleibt konsistent und erzeugen des lokalen Status-File
        * VORSCHLAG: Falls sys gebraucht wird, wird das passwort als Variable eingelesen und am ende wieder resettet
    => DONE

    - Ausführen der Befehle                                                           (apply)
        * Erst hier wird das lokale Status - File geschrieben
        * Nachdem die Installation der Dependencies, Schemas und Applikationen erfolgreich war
    => DONE

    - Einspielen des aktuellen Projektstands                                          (deploy)
        * Ein Entwickler pusht Änderungen, die vom Rest des Teams gepullt werden
        * Update nimmt den Code-Stand und spielt diesen auf der lokalen umgebung ein
        * Die Änderungen werden nur für APP, LOGIC, DATA gemacht + APEX Applikation
        * Kann auch manuell ausgeführt werden, wenn sich aber die xcl.yaml ändert muss plan / apply gemacht werden
    => DONE

    - Bauen eines neuen Releases                                                    (build)
        * Es wird eine neue Versionsnummer festgelegt
        * Projektstand gepusht
        * Eingespielt wird das release dann wieder über plan / apply
        GRUND: Plan erkennt die Änderung an der Versionsnummer und generiert die notwendigen Befehle...

    - Passwort für Benutzer generieren @JAW

    - Multi Application Support?

    - Upgrade Funktion:
        * Wenn sich dinge in der DirectoryStruktur ändern, sollte xcl automatisch die Änderungen vornehmen können,
          solange, die Ordner nicht mit Dateien befüllt sind. Ansonsten sollte eine Hilfe-Meldung ausgegeben werden
        * Es werden nur Ordner hinzugefügt nicht gelöscht!
    => DONE

    - setup 
        * Der Ordner setup beinhaltet alle Maßnahmen, die für die Installation der Application notwendig sind, für die aber Admin Rechte auf der DB erforderlich sind
          wie zum Beispiel: ACLs, Workspace anlegen, User anlegen etc. pp.
        * IDEE:
            - Benenne init um in setup
            - flags:
                -- schemata
                -- objects

    - LOGGING-Klasse schreiben:
        * damit die Logs während des Deploys weggeschrieben werden brauchen wir eine Logging-Klasse!
        * DER DB-HELPER loggt im moment nichts weg! Nach dem apply ist man blind!

    - PROBLEME:
        * Ein Feature wird entfernt
            GRUND: Plan kann zwar erkennen, dass das Feature entfernt wurde, kennt aber den Benutzer nicht mehr unter dem es installiert wurde
                   Deswegen kann der Befehl zum entfernen des Features nicht generiert werden.
            MÖGLICHER WORKAROUND: Schema Only Accounts (erst ab 18c)
            MÖGLICHE LÖSUNG: Status file bekommt auch das schema und das passwort mit damit Features deinstalliert werden können


    - DBFLOW: @MMI
        * Implementieren der Build Funktionen
        * Implementieren der Deploy Funktionen
    
    - AutoApply: @JAW
        * xcl project:plan --auto --yes
    =>DONE
    
    - Bug in apply @JAW
        * Hier wird der Hash nicht sauber weggeschrieben 
    =>DONE
    
    - Projekt init aufräumen @JAW    
    =>DONE?

    - SingleSchema @JAW
    =>DONE
 
    - Project create mit Wizard @MMI
    
    - Deploy Method für welche xcl-Version?
        * Warum: Wenn sich dinge in der Ordnerstruktur ändern, muss auch die deploy Methode angeglichen werden
        * Um kompatibilität zu gewähren muss die deploy feature version zur xcl version passen
